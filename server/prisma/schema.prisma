// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum AccessType {
  PRIVATE
  PUBLIC
}

enum BlockType {
  IMPERATIVE
  QUESTION
  DECLARATION
}

enum BlockState {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  ARCHIVED
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String?  @unique
  image     String?
  role      Role     @default(USER)
  blocks    Block[]
}

model Block {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  actingUser        User                @relation(fields: [userId], references: [id])
  userId            String
  accessType        AccessType          @default(PRIVATE)
  blockType         BlockType           @default(IMPERATIVE)
  blockState        BlockState          @default(NOT_STARTED)
  humanText         String
  parents           HierarchyRelation[] @relation("parents")
  children          HierarchyRelation[] @relation("children")
  workspace         String
  workspaceOutgoing ReferenceRelation[] @relation("outgoing")
  workspaceIncoming ReferenceRelation[] @relation("incoming")
  originalVersion  VersionRelation?   @relation("original")
  derivedVersions   VersionRelation[]   @relation("derived")
}

model VersionRelation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  original   Block    @relation("original", fields: [originalId], references: [id])
  originalId String
  derived    Block    @relation("derived", fields: [derivedId], references: [id])
  derivedId  String
}

model HierarchyRelation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  child      Block    @relation("parents", fields: [childId], references: [id])
  childId    String
  parent     Block    @relation("children", fields: [parentId], references: [id])
  parentId   String
  childIndex Int
}

model ReferenceRelation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blockFrom Block    @relation("outgoing", fields: [fromId], references: [id])
  fromId    String
  blockTo   Block    @relation("incoming", fields: [toId], references: [id])
  toId      String
}
